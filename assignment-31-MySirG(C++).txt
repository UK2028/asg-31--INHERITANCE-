NAME-UDIT KHANDELWAL						ASSIGNMENT-31 (new and delete operator, Inheritance)




1. Define a class Person with instance members name and age. Also define member
functions setName(), setAge(), getName(), getAge(). Now define class Employee by
inheriting Person class. In the Employee class define empid and salary as instance
members. Also define setEmpid, setSalary, getEmpid, getSalary.

#include<iostream>
#include<string.h>
using namespace std;

class Person
{
protected:
    int age;
    char name[50];

public:
    Person()
    {
        this->age=0;
        strcpy(this->name,"");
    }
    void setAge(int age)
    {
        this->age=age;
    }
    void setName(char *s)
    {
        strcpy(this->name,s);
    }
    int getAge()
    {
        return this->age;
    }
    char* getName()
    {
        return this->name;
    }
};

class Employee : public Person
{
protected:
    int empId;
    float salary;

public:
    Employee()
    {
        this->empId=0;
        this->salary=0;
    }
    void setEmpId(int id)
    {
        this->empId=id;
    }
    void setSalary(float sal)
    {
        this->salary=sal;
    }
    int getEmpId()
    {
        return this->empId;
    }
    float getSalary()
    {
        return this->salary;
    }
    void display()
    {
        cout<<"Name is: \""<<getName()<<"\" Age is: "<<getAge()<<" EmpId: "<<getEmpId()<<" salary: "<<getSalary()<<endl;
    }
};

int main()
{
    Employee e;
    e.setAge(30);
    e.setName("udit khandelwal");
    e.setEmpId(10);
    e.setSalary(10000);
    e.display();
    return 0;
}


2. Write a C++ program to add two numbers using single inheritance. Accept these two
numbers from the user in base class and display the sum of these two numbers in
derived class.

#include<iostream>
#include<string.h>
using namespace std;

class Base
{
protected:
    int a,b;

public:
   Base()
   {
       a=0;
       b=0;
   }
   void getNumbers()
   {
       cout<<"enter two numbers: ";
       cin>>a>>b;
   }
};

class Add : public Base
{
public:
    void add()
    {
        cout<<"Addition of two numbers: "<<endl;
        cout<<a<<" + "<<b<<" = "<<a+b;
    }
};

int main()
{
    Add a;
    a.getNumbers();
    a.add();
    return 0;
}
	

3. Write a C++ program to calculate the percentage of a student using multi-level
inheritance. Accept the marks of three subjects in base class. A class will be derived
from the above mentioned class which includes a function to find the total marks
obtained and another class derived from this class which calculates and displays the
percentage of students.

#include<iostream>
#include<string.h>
using namespace std;

class Base
{
protected:
    float sub1,sub2,sub3;

public:
   Base()
   {
       sub1=0;
       sub2=0;
       sub3=0;
   }

   void inputMarks()
   {
       cout<<"enter marks of subject 1 : ";
       cin>>sub1;
       cout<<"enter marks of subject 2 : ";
       cin>>sub2;
       cout<<"enter marks of subject 3 : ";
       cin>>sub3;
   }
};

class Derived1 : public Base
{
protected:
    float total;

public:
    Derived1()
    {
        total=0;
    }

    void findTotalMarks()
    {
        total=sub1+sub2+sub3;
        cout<<"Total Marks: "<<total<<endl;
    }
};

class Derived2 : public Derived1
{
protected:
    float percentage;

public:
    Derived2()
    {
        percentage=0;
    }

    void findPercentage()
    {
        percentage=total/3.0;
        cout<<"Percentage : "<<percentage<<endl;
    }
};

int main()
{
    Derived2 obj;
    obj.inputMarks();
    obj.findTotalMarks();
    obj.findPercentage();
    return 0;
}


4. Write a C++ program to design a base class Person (name, address,
phone_no). Derive a class Employee (eno, ename) from Person. Derive a
class Manager (designation, department name, basic-salary) from
Employee. Write a menu driven program to:
a. Accept all details of 'n' managers.
b. Display manager having highest salary

#include<iostream>
#include<string.h>
using namespace std;

class Person
{
protected:
    char name[50];
    char address[100];
    long int phone_no;

public:

};

class Employee : public Person
{
protected:
    int eno;
    char ename[50];
};

class Manager : public Employee
{
protected:
    char designation[50];
    char department_name[50];
    float salary;

public:
    void inputData()
    {
        cout<<"Enter Details of Manager"<<endl;
        cout<<"---------------------------"<<endl;
        cout<<"Enter Employee No. : ";
        cin>>eno;
        cout<<"Enter Name : ";
        cin>>name;
        cout<<"Enter Address : ";
        cin>>address;
        cout<<"Enter Phone No. : ";
        cin>>phone_no;
        cout<<"Enter Designation : ";
        cin>>designation;
        cin.ignore();
        cout<<"Enter Department Name : ";
        cin>>department_name;
        cout<<"Enter Basic Salary : ";
        cin>>salary;
    }

    void displayDetails()
    {
        cout<<"Details of Manager"<<endl;
        cout<<"---------------------------"<<endl;
        cout<<"Employee No. : "<<eno<<endl;
        cout<<"Name : "<<name<<endl;
        cout<<"Address : "<<address<<endl;
        cout<<"Phone No. : "<<phone_no<<endl;
        cout<<"Designation : "<<designation<<endl;
        cout<<"Department Name : "<<department_name<<endl;
        cout<<"Salary : "<<salary<<endl;
    }

    float getSalary()
    {
        return salary;
    }
};

int main()
{
    int n,i=0,index=0;
    cout<<"How Many Managers You Want to Enter : ";
    cin>>n;
    Manager m[n];
    for(i=0;i<n;i++)
    {
        m[i].inputData();
    }
    for(i=0;i<n;i++)
    {
        if(m[index].getSalary()<m[i].getSalary())
            index=i;
    }
    cout<<"Details of Manager with Highest Salary is : "<<endl;
    m[index].displayDetails();
    return 0;
}


5. Write a C++ program to define a base class Item (item-no, name, price).
Derive a class Discounted-Item (discount-percent). A customer purchases
'n' items. Display the item-wise bill and total amount using appropriate
format.

#include<iostream>
#include<string.h>
using namespace std;

class Item
{
private:
    char name[50];
    int itemNo;
    float price;

public:
    void setName()
    {
        cout<<"Enter Item Name: ";
        cin>>name;
    }

    void setItemNo()
    {
        cout<<"Enter Item No. : ";
        cin>>itemNo;
    }

    void setPrice()
    {
        cout<<"Enter Price : ";
        cin>>price;
    }

    void showName()
    {
        cout<<"Item Name : "<<name<<endl;
    }

    void showItemNo()
    {
        cout<<"Item No : "<<itemNo<<endl;
    }

    void showPrice()
    {
        cout<<"Item Price: "<<price<<endl;
    }

    float getPrice()
    {
        return price;
    }
};

class Discount : public Item
{
private:
    float discountPercent;

public:
    void inputData()
    {
        setName();
        setItemNo();
        setPrice();
        cout<<"Enter Discount Percentage : ";
        cin>>discountPercent;
        cout<<"-------------------------------"<<endl;
    }

    void showData()
    {
        showName();
        showItemNo();
        showPrice();
        cout<<"Discount Percent : "<<discountPercent<<endl;
        cout<<"Discounted Price : "<<getPriceAfterDiscount()<<endl;
    }

    float getPriceAfterDiscount()
    {
        return getPrice()-(getPrice()*discountPercent)/100.0;
    }
};

int main()
{
    int n,i=0;
    cout<<"How many Items you want to enter? : ";
    cin>>n;
    int price = 0;
    int beforeDiscountPrice = 0;
    Discount d[n];
    for(i=0;i<n;i++)
    {
        d[i].inputData();
        price+=d[i].getPriceAfterDiscount();
        beforeDiscountPrice+=d[i].getPrice();
    }
    for(i=0;i<n;i++)
    {
        d[i].showData();
    }
    cout<<"Total Price : "<<beforeDiscountPrice<<endl;
    cout<<"Total Discount : "<<beforeDiscountPrice-price<<endl;
    cout<<"Total Amount : "<<price<<endl;

    return 0;
}

OR (USE STATIC)

/*#include<iostream>
#include<string.h>
using namespace std;

class Item
{
private:
    char name[50];
    int itemNo;
    float price;

public:
    void setName()
    {
        cout<<"Enter Item Name: ";
        cin>>name;
    }

    void setItemNo()
    {
        cout<<"Enter Item No. : ";
        cin>>itemNo;
    }

    void setPrice()
    {
        cout<<"Enter Price : ";
        cin>>price;
    }

    void showName()
    {
        cout<<"Item Name : "<<name<<endl;
    }

    void showItemNo()
    {
        cout<<"Item No : "<<itemNo<<endl;
    }

    void showPrice()
    {
        cout<<"Item Price: "<<price<<endl;
    }

    float getPrice()
    {
        return price;
    }
};

class Discount : public Item
{
private:
    float discountPercent;
    static float amt;
    static float dis;
    static float tot;

public:
    void inputData()
    {
        setName();
        setItemNo();
        setPrice();
        cout<<"Enter Discount Percentage : ";
        cin>>discountPercent;
        cout<<"-------------------------------"<<endl;
        tot+=getPrice();
        dis+=(getPrice()*discountPercent)/100.0;
        amt=(tot-dis);
    }

    void showData()
    {
        showName();
        showItemNo();
        showPrice();
        cout<<"Discount Percent : "<<discountPercent<<endl;
        cout<<"Discounted Price : "<<getPrice()-(getPrice()*discountPercent)/100.0<<endl;
    }

    static float getAmount()
    {
        return amt;
    }

    static float getTotal()
    {
        return tot;
    }

    static float getDiscount()
    {
        return dis;
    }

};

float Discount::tot=0;
float Discount::amt=0;
float Discount::dis=0;

int main()
{
    int n,i=0;
    cout<<"How many Items you want to enter? : ";
    cin>>n;
    
    Discount d[n];
    for(i=0;i<n;i++)
    {
        d[i].inputData();
    }
    
    for(i=0;i<n;i++)
    {
        d[i].showData();
    }
    
    cout<<"Total Price : "<<Discount::getTotal()<<endl;
    cout<<"Total Discount : "<<Discount::getDiscount()<<endl;
    cout<<"Total Amount : "<<Discount::getAmount()<<endl;

    return 0;
}*/


6. Write a C++ program to demonstrate how a common friend function can
be used to exchange the private values of two classes. (Use call by
reference method).

#include<iostream>
#include<string.h>
using namespace std;

class B;

class A
{
private:
    int a;

public:
    A(int x)
    {
        a=x;
    }

    void displayA()
    {
        cout<<"value of a : "<<a<<endl;
    }

    friend void swapValues(A *obj1,B *obj2);
};

class B
{
private:
    int b;

public:
    B(int x)
    {
        b=x;
    }

    void displayB()
    {
        cout<<"value of b : "<<b<<endl;
    }

    friend void swapValues(A *obj1,B *obj2);
};

void swapValues(A *obj1,B *obj2)
{
    int temp;
    temp=obj1->a;
    obj1->a=obj2->b;
    obj2->b=temp;
}

int main()
{
    A objA(10);
    B objB(20);
    swapValues(&objA,&objB);
    objA.displayA();
    objB.displayB();
    return 0;
}


7. Write class declarations and member function definitions for a C++ base
class to represent an Employee (emp-code, name).
Derive two classes as Fulltime (daily rate, number of days, salary) and
Parttime (number of working hours, hourly rate, salary).
Write a menu driven program to:
1. Accept the details of ‘n’ employees.
2. Display the details of ‘n’ employees.
3. Search a given Employee by emp-code.

#include<iostream>
using namespace std;

class Employee
{
private:
    int emp_code;
    char name[50];

public:

    void setEmpCode()
    {
        cout<<"Enter Employee Code: ";
        cin>>emp_code;
        cin.ignore();
    }

    void setName()
    {
        cout<<"Enter Employee Name: ";
        cin>>name;
    }

    int getEmpCode()
    {
        return emp_code;
    }

    char* getName()
    {
        return name;
    }
};

class FullTime : public Employee
{
private:
    float dailyRate;
    int totalDays;
    float salary;

public:

    void inputDetails()
    {
        setEmpCode();
        setName();
        cout<<"Enter Daily Rate: ";
        cin>>dailyRate;
        cout<<"Enter Total Days: ";
        cin>>totalDays;
        salary=dailyRate*totalDays;
    }

    void showDetails()
    {
        cout<<"Employee code:  "<<getEmpCode()<<endl;
        cout<<"Employee Name: "<<getName()<<endl;
        cout<<"Salary: "<<salary<<endl;
        cout<<"Status: Full Time"<<endl;
    }
};

class PartTime : public Employee
{
private:
    int workingHours;
    float hourRate;
    float salary;

public:

    void inputDetails()
    {
        setEmpCode();
        setName();
        cout<<"Enter Hourly Rate: ";
        cin>>hourRate;
        cout<<"Enter Total Working Hours: ";
        cin>>workingHours;
        salary=hourRate*workingHours;
    }

    void showDetails()
    {
        cout<<"Employee code:  "<<getEmpCode()<<endl;
        cout<<"Employee Name: "<<getName()<<endl;
        cout<<"Salary: "<<salary<<endl;
        cout<<"Status: Part Time"<<endl;
    }
};

int main()
{
    int n,m,i=0;
    FullTime *f;
    f = new FullTime[50];
    PartTime *p;
    p = new PartTime[50];
    while(1)
    {
        int ch;
        cout<<"1.Enter Record"<<endl;
        cout<<"2.Display Record"<<endl;
        cout<<"3.Search Record"<<endl;
        cout<<"4.Quit"<<endl;
        cout<<"Enter your choice: ";
        cin>>ch;

        switch(ch)
        {

        case 1:
            {int ch1;
            cout<<"1.Full Time Employee"<<endl;
            cout<<"2.Part Time Employee"<<endl;
            cout<<"Enter your choice: ";
            cin>>ch1;
            switch(ch1)
            {
                case 1:
                    {cout<<"Enter How Many Employee: ";
                    cin>>n;
                    for(i=0;i<n;i++)
                    {
                        f[i].inputDetails();
                    }
                    break;}


                case 2:
                    {cout<<"Enter How Many Employee: ";
                    cin>>m;
                    for(i=0;i<m;i++)
                    {
                        p[i].inputDetails();
                    }
                    break;}

            }
            break;}


        case 2:
            {for(i=0;i<n;i++)
            {
                f[i].showDetails();
            }
            for(i=0;i<m;i++)
            {
                p[i].showDetails();
            }
            break;}

        case 3:
            {int emp,flag=0;
            cout<<"Enter Employee Code: ";
            cin>>emp;
            for(i=0;i<n;i++)
            {
                if(f[i].getEmpCode()==emp)
                {
                    f[i].showDetails();
                    flag++;
                    break;
                }
            }
            if(flag==0)
            {
                for(i=0;i<m;i++)
                {
                    if(p[i].getEmpCode()==emp)
                    {
                        p[i].showDetails();
                        flag++;
                        break;
                    }
                }
                if(flag==0)
                {
                    cout<<"No Employee is found"<<endl;
                }
            }
            break;}

        default:
            {cout<<"Enter a valid option"<<endl;
            break;}

        case 4:
            {exit(0);
            break;}
        }
    }
    return 0;
}


8 - In a bank, different customers have savings account. Some customers may
have taken a loan from the bank. So bank always maintain information about
bank depositors and borrowers.
Design a Base class Customer (name, phone-number). Derive a class
Depositor(accno, balance) from Customer.
Again, derive a class Borrower (loan-no, loan-amt) from Depositor.
Write necessary member functions to read and display the details of ‘n’
customers.

#include<iostream>
using namespace std;

class Customer
{
private:
    long long phone_no;
    char name[50];

public:

    void setPhoneNo()
    {
        cout<<"Enter Phone Number: ";
        cin>>phone_no;
    }

    void setName()
    {
        cout<<"Enter Name: ";
        cin>>name;
    }

    int getPhoneNo()
    {
        return phone_no;
    }

    char* getName()
    {
        return name;
    }
};

class Depositor : public Customer
{
private:
    int acc_no;
    float balance;

public:
    void inputDetailsOfDepositor()
    {
        setName();
        setPhoneNo();
        cout<<"Enter Account Number: ";
        cin>>acc_no;
        cout<<"Enter Balance: ";
        cin>>balance;
    }

    int getAccNo()
    {
        return acc_no;
    }

    float getBalance()
    {
        return balance;
    }
};

class Borrower : public Depositor
{
private:
    int loan_no;
    float loan_amt;

public:
    void inputDetailsOfBorrower()
    {
        inputDetailsOfDepositor();
        cout<<"Enter Loan Number: ";
        cin>>loan_no;
        cout<<"Enter Loan Amount: ";
        cin>>loan_amt;
        cout<<"------------------------------"<<endl;
    }

    void displayDetails()
    {
        cout<<"--------------------------------"<<endl;
        cout<<"Customer Name: "<<getName()<<endl;
        cout<<"Customer Phone Number: "<<getPhoneNo()<<endl;
        cout<<"Customer A/C No : "<<getAccNo()<<endl;
        cout<<"Balance: "<<getBalance()<<endl;
        cout<<"-----------------------------------"<<endl;
        cout<<"Loan No: "<<loan_no<<endl;
        cout<<"Loan Amount: "<<loan_amt<<endl;
        cout<<"------------------------------------"<<endl;
    }
};

int main()
{
    int n;
    cout<<"Enter How Many Customer Details You Want: ";
    cin>>n;
    Borrower *p;
    p= new Borrower[n];
    for(int i=0;i<n;i++)
    {
        p[i].inputDetailsOfBorrower();
    }
    cout<<"Details Of Customer: "<<endl;
    for(int i=0;i<n;i++)
    {
        p[i].displayDetails();
    }    return 0;
}


9. Write a C++ program to implement the following class hierarchy:
Student: id, name
StudentExam (derived from Student): Marks of 6 subjects
StudentResult (derived from StudentExam) : percentage
Define appropriate functions to accept and display details.
Create 'n' objects of the StudentResult class and display the marklist.

#include<iostream>
using namespace std;

class Student
{
private:
    int id;
    char name[50];

public:
    void setId()
    {
        cout<<"Enter Roll no: ";
        cin>>id;
    }

    void setName()
    {
        cout<<"Enter Name of Student: ";
        cin>>name;
    }

    void displayName()
    {
        cout<<"Name of Student: "<<name<<endl;
    }

    void displayId()
    {
        cout<<"Roll No: "<<id<<endl;
    }
};

class StudentExam : public Student
{
private:
    float marks[6];

public:
    void setMarks()
    {
        for(int i=0;i<6;i++)
        {
            cout<<"Enter Marks of Subject "<<i+1<<" : ";
            cin>>marks[i];
        }
    }

    void displayMarks()
    {
        for(int i=0;i<6;i++)
        {
            cout<<"Marks of Subject "<<i+1<<" : "<<marks[i]<<endl;
        }
    }

    float* getMarks()
    {
        return marks;
    }
};

class StudentResult : public StudentExam
{
private:
    float percent;

public:
    void displayResult()
    {
        float *p=getMarks();
        float sum=0;
        for(int i=0;i<6;i++)
        {
            sum+=p[i];
        }
        percent=sum/6.0;
        cout<<"----------MARKSHEET------------"<<endl;
        displayName();
        displayId();
        displayMarks();
        cout<<"Percentage: "<<percent<<endl;
        cout<<"-----------------------------------"<<endl;
    }
};

int main()
{
    int n;
    cout<<"Enter How Many Students you want: ";
    cin>>n;
    StudentResult *p;
    p = new StudentResult[n];
    for(int i=0;i<n;i++)
    {
        p[i].setId();
        p[i].setName();
        p[i].setMarks();
    }
    cout<<"Details of Students: "<<endl;
    for(int i=0;i<n;i++)
    {
        p[i].displayResult();
    }
    return 0;
}


10. Consider two base classes
worker(int code, char name, float salary),
officer(float DA, HRA)
class manger(float TA(is 10% of salary), gross salary) is derived from both base
classes.
Write necessary member functions.

#include<iostream>

using namespace std;

class Worker
{
private:
    int code;
    char name[50];
    float salary;

public:
    void setCode()
    {
        cout<<"Enter Code: ";
        cin>>code;
    }

    void setName()
    {
        cout<<"Enter Name: ";
        cin>>name;
    }

    void setSalary()
    {
        cout<<"Enter Salary: ";
        cin>>salary;
    }

    void displayName()
    {
        cout<<"Name: "<<name<<endl;
    }

    void displayCode()
    {
        cout<<"Code: "<<code<<endl;
    }

    void displaySalary()
    {
        cout<<"Salary: "<<salary<<endl;
    }

    float getSalary()
    {
        return salary;
    }
};

class Officer
{
private:
    float DA;
    float HRA;

public:
    void setDA()
    {
        cout<<"Enter DA: ";
        cin>>DA;
    }

    void setHRA()
    {
        cout<<"Enter HRA: ";
        cin>>HRA;
    }

    void displayDA()
    {
        cout<<"DA: "<<DA<<endl;
    }

    void displayHRA()
    {
        cout<<"HRA: "<<HRA<<endl;
    }

    float getDA()
    {
        return DA;
    }

    float getHRA()
    {
        return HRA;
    }
};

class Manager : public Worker,public Officer
{
private:
    float TA;
    float grossSalary;

public:
    void displayManager()
    {
        TA=getSalary()/10.0;
        grossSalary=getSalary()+getDA()+getHRA()+TA;
        cout<<"-------------------------"<<endl;
        displayName();
        displayCode();
        displaySalary();
        displayDA();
        displayHRA();
        cout<<"TA: "<<TA<<endl;
        cout<<"Gross Salary: "<<grossSalary<<endl;
    }
};

int main()
{
    int n;
    cout<<"Enter MANAGERS count: ";
    cin>>n;
    Manager *p;
    p = new Manager[n];
    for(int i=0;i<n;i++)
    {
        cout<<"Enter Worker Info for "<<i+1<<" : "<<endl;
        cout<<endl<<"----------------------------------"<<endl;
        p[i].setCode();
        p[i].setName();
        p[i].setSalary();
        p[i].setDA();
        p[i].setHRA();
    }
    cout<<"--------------------------------"<<endl;
    cout<<"       Manager Information        "<<endl;
    cout<<"--------------------------------"<<endl;
    for(int i=0;i<n;i++)
    {
        p[i].displayManager();
    }
    return 0;
}







